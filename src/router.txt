How the Router is started in React.js

1. App.js code First

// import logo from './logo.svg';
import './App.css';
import Alert from './components/Alert';
import About from './components/About';
import Navbar from './components/Navbar';
import TextForm from './components/TextForm';
import React, {useState} from 'react'
import { BrowserRouter as Router, Routes, Route} from "react-router-dom";
import Newpage from './components/Newpage';



function App() {

   const [mode, setMode] = useState('light')
   const [alert,setAlert] = useState(null)

   const showalert=(message,type)=>{
    setAlert({
      msg:message,
      type:type
    })
    setTimeout(()=>{
      setAlert(null)
    },3000)
   }

   const toggleMode =()=>{
    if(mode === 'light'){
      setMode('dark')
      document.body.style.backgroundColor = '#042743'
      showalert("Dark Mode has been Enabled","success")

      document.title="Textutils - Dark Mode Enable"
      // setInterval(() => {
      //   document.title="Texutils is Amazing Mode"
      // }, 2000);
      // setInterval(() => {
      //   document.title="Install Textutils Now"
      // }, 1500);

    }
    else{
      setMode('light')
      document.body.style.backgroundColor = 'white'
      showalert("Light Mode has been Enabled","success")
      document.title ="Textutils - Light Mode Enable"
    }

   }

  
  return (
    <>
    
    {/* <Navbar  title="textutils" abouttext="About Text"/> */}
    {/* <Navbar /> */}
<Router>
    <Navbar title="Textutils" mode={mode} toggleMode={toggleMode}/>
    <Alert alert={alert}/>
    <div className="container my-3">

<Routes>
          <Route exact path="/about" element={<About/>}>About</Route>
          <Route exact path="/newpage" element={<Newpage/>}>About</Route>
         
          <Route exact path="/" element={<TextForm showalert={showalert}heading="Enter the text analyze"  mode={mode}/>}></Route>
          </Routes>
     
    
    </div>
    </Router>

    
  </>
  );
}

export default App;

2. Navbar.js folder code is Below.

import React from 'react'
import PropTypes from 'prop-types'
import { Link } from 'react-router-dom'

export default function Navbar(props) {
  return (
    <>

    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>
  <div className="container-fluid">
    <a className="navbar-brand" href="/">{props.title}</a>
    <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span className="navbar-toggler-icon"></span>
    </button>
    <div className="collapse navbar-collapse" id="navbarSupportedContent">
      <ul className="navbar-nav me-auto mb-2 mb-lg-0">

        <li className="nav-item">
          <Link className="nav-link active" aria-current="page" to="/">Home</Link>
        </li>

        <li className="nav-item">
          <Link className="nav-link" to="/about">About</Link>
        </li>

        <li className="nav-item">
          <Link className="nav-link" to="/newpage">NewPage</Link>
        </li>
        
      </ul>

      {/* <form className="d-flex" role="search">
        <input className="form-control me-2" type="search" placeholder="Search" aria-label="Search"/>
        <button className="btn btn-outline-success" type="submit">Search</button>
      </form> */}

    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`} >
  <input className="form-check-input" onClick={props.toggleMode} type="checkbox" role="switch" id="flexSwitchCheckDefault"/>
  <label className="form-check-label" htmlFor="flexSwitchCheckDefault">Enable DarkMode</label> 
</div> 
    </div>
  </div>
</nav>



</>
  )
}

Navbar.propsTypes = {
  title: PropTypes.isrequired,
  abouttext:PropTypes.string
}

Navbar.defaultProps = {
  title: "Textutils",
  abouttext: "About"

};

// ${props.mode==='light'?'dark':'light'}
// {props.abouttext}

3. Textform.js folder code is Below.

import React, {useState} from 'react'

export default function TextForm(props) {
  const handleUpClick =()=>{
    console.log("Uppercase was Clicked" + text);
    let newText=text.toUpperCase();
    setText(newText)
    props.showalert("Convert to Upper Case","success")
    //setText("You have clicked on handleclick") 1 example.
  }

  const handleLoClick =()=>{
    console.log("Uppercase was Clicked" + text);
    let newText=text.toLowerCase();
    setText(newText)
    props.showalert("Convert to Lower Case","success")
    //setText("You have clicked on handleclick") 1 example.
  }

  
  const handleClear =()=>{
    let newTextclear=""
    setText(newTextclear)
    props.showalert("Clear the Text","success")
    //setText("You have clicked on handleclick") 2 Clear all the text.
  }

  const handleCapitalcase =()=>{
    let newcapital=text.slice();
    setText(newcapital)
  }

  const handlecopy =()=>{
    console.log("Copy the text")
    let copytext=document.getElementById("mybox");
    copytext.select();
    // copytext.setSelectionRange(0,9999);/
    navigator.clipboard.writeText(text.value);
    props.showalert("Copy all the Text ","success")
  }

  const handlextraspaces = ()=>{
    let newspace = text.split(/[ ]+/);
    setText(newspace.join(" "))
    props.showalert("Remove the Extra Spaces","success")
  }


  const handleOnChange=(event)=>{
    console.log("On Change")
    setText(event.target.value)
  }

  const [text, setText] = useState('enter the text');

  // text = "new text"; // wrong way to change the state.
  // setText("new text"); // correct way to change the state.
  return (
    <>

   <div className="container" style={{color: props.mode==='dark'?'white':'black'}}  >
    
    <h1>{props.heading} </h1>
<div className="mb-3">
  {/* <label for="exampleFormControlTextarea1" class="form-label">Example textarea</label> */}
  <textarea className="form-control" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'light',color:props.mode==='dark'?'white':'#042743'}} id="mybox" rows="8"></textarea>
 </div>

<button className="btn btn-primary mx-1" onClick={handleUpClick}>Convert to uppercase</button>

<button className="btn btn-primary mx-1" onClick={handleLoClick}>Convert to LowerCase</button>

<button className="btn btn-primary mx-1" onClick={handleClear}>Clear Text</button>

<button className="btn btn-primary mx-1" onClick={handlecopy}>Copy Text</button>

<button className="btn btn-primary mx-1" onClick={handlextraspaces}>extra spaces </button>



<button className="btn btn-primary mx-1" onClick={handleCapitalcase}>Capitalise Case</button>

   </div>
   <div className="container my-4" style={{color: props.mode==='dark'?'white':'#042743'}}>
    <h2>Your Text Summary</h2>
    <p> {text.split(" ").length} words and {text.length} character</p>
    <p> {0.008 * text.split(" ").length } Minutes Read</p>
    <h2>Preview</h2>
    <p>{text.length>0?text:"Enter Something to preview it Here"}</p>
   </div>


   </>

  )
}

// style={{color: props.mode==='dark'?'white':'black'}}

4. About.js folder code is Below.

import React,{useState} from 'react'

export default function About() {

    const [mystyle,setMyStyle] = useState({
        color:"black",
        backgroundColor:"white"
        
    })
    
    const [btnText,setbtnText]=useState('Enable Dark Mode')

    const toggleStyle = ()=>{
        if(mystyle.color === 'black'){
            setMyStyle({
                color:"white",
        backgroundColor:"black",
        border:"2px solid white"
            })

            setbtnText("Enable Light Mode")

        }
        else{
            setMyStyle({
                color:"black",
        backgroundColor:"white"
            })

            setbtnText("Enable Dark Mode")

        }
    }
  return (
    <div className='container' style={mystyle}>
        <h2 className='my-3'>Abouts Us</h2>
        <div className="accordion" id="accordionExample" style={mystyle}>
  <div className="accordion-item">
    <h2 className="accordion-header">
      <button className="accordion-button" type="button" style={mystyle} data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
        Accordion Item #1
      </button>
    </h2>
    <div id="collapseOne" className="accordion-collapse collapse show" data-bs-parent="#accordionExample">
      <div className="accordion-body" style={mystyle}>
        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
  <div className="accordion-item">
    <h2 className="accordion-header">
      <button className="accordion-button collapsed" type="button" style={mystyle} data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
        Accordion Item #2
      </button>
    </h2>
    <div id="collapseTwo" className="accordion-collapse collapse" data-bs-parent="#accordionExample">
      <div className="accordion-body" style={mystyle}>
        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
  <div className="accordion-item">
    <h2 className="accordion-header">
      <button className="accordion-button collapsed" type="button" style={mystyle} data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
        Accordion Item #3
      </button>
    </h2>
    <div id="collapseThree" className="accordion-collapse collapse" data-bs-parent="#accordionExample">
      <div className="accordion-body" style={mystyle}>
        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
</div>
<div className="container my-3">
<button onClick={toggleStyle} type="button" className="btn btn-primary">{btnText}</button>
</div>

    </div>
  )
}

5. Alert.js Folder code is below.

import React from 'react'

function Alert(props) {
    const capitalize =(word)=>{
        const lower =word.toLowerCase()
        return lower.charAt(0).toUpperCase() + lower.slice(1) 
    }
  return (
   props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role="alert">
  <strong>{capitalize(props.alert.type)}</strong> {props.alert.msg}
 
</div>
  )
}

export default Alert